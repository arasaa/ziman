import React, { useState, useEffect, useRef } from 'react';
import './partEightChatbot.css';

const PartEightChatbot = () => {
  const [userMessage, setUserMessage] = useState('');
  const [chatHistory, setChatHistory] = useState([]);
  const [isChatbotTyping, setIsChatbotTyping] = useState(false);
  const chatHistoryRef = useRef(null);
  const [userName, setUserName] = useState(null);
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);

  const handleUserMessageChange = (e) => {
    setUserMessage(e.target.value);
  };

  const handleUserMessageSubmit = (e) => {
    e.preventDefault();

    setChatHistory((prevChatHistory) => [
      ...prevChatHistory,
      { message: userMessage, sender: 'user', name: 'User' },
    ]);

    setUserMessage('');

    setIsChatbotTyping(true);

    setTimeout(() => {
      const chatbotResponse = generateChatbotResponse(userMessage);

      setChatHistory((prevChatHistory) => [
        ...prevChatHistory,
        {
          message: chatbotResponse.message,
          sender: 'chatbot',
          name: 'Chatbot',
          buttons: chatbotResponse.buttons,
        },
      ]);

      setIsChatbotTyping(false);
    }, 2000);
  };

  const responsePatterns = [
    { pattern: /hi|hey/i, response: 'Hello! How can I assist you?' },
    {
      pattern: /open account/i,
      response: 'To open an account, please visit our website and fill out the application form.',
      buttons: [{ label: 'Open Account', url: 'https://example.com/open-account' }],
    },
    { pattern: /balance/i, response: 'You can check your account balance by logging into your online banking account.' },
    { pattern: /transfer money/i, response: 'You can transfer money between accounts using our mobile banking app.' },
    // Add more response patterns and replies as needed
  ];

  const questionPatterns = [
    { pattern: /hello|wie geht es dir|hi/i, question: 'Woher kommen Sie?' },
    {
      pattern: /was machst du/i,
      question: {
        message: 'Ich bin ein Chatbot, der Ihnen bei Fragen und Anliegen helfen kann.',
        buttons: [
          { label: 'Mehr erfahren', url: 'https://example.com/mehr-erfahren' },
          { label: 'Mehr', url: 'https://example.com/mehr' },
          { label: 'Erfahren', url: 'https://example.com/erfahren' },
        ],
      },
    },
    // Add more question patterns and questions as needed
  ];

  const generateChatbotResponse = (userMessage) => {
    const lastChat = chatHistory[chatHistory.length - 1];

    const lowercaseUserMessage = userMessage.toLowerCase();

    // Check if any response patterns match the user's message
    for (const pattern of responsePatterns) {
      if (pattern.pattern.test(lowercaseUserMessage)) {
        return { message: pattern.response, buttons: pattern.buttons };
      }
    }

    if (!userName) {
      // Extract the name from the user's message
      const namePattern = /(?:mein Name ist|ich bin|ich heiße)?\s*([\w\s]+)/i;
      const match = lowercaseUserMessage.match(namePattern);

      if (match && match[1]) {
        const name = match[1];
        setUserName(name);
        const welcomeMessage = `Hallo, ${name}! Wie kann ich Ihnen helfen?`;
        return { message: welcomeMessage };
      }
    }

    // Check if the user is currently being asked a question
    if (lastChat && lastChat.buttons) {
      const selectedButton = lastChat.buttons.find((button) => button.label === lowercaseUserMessage);
      if (selectedButton) {
        if (selectedButton.isCorrect) {
          // User provided the correct answer
          const nextQuestion = getNextQuestion();
          if (nextQuestion) {
            setCurrentQuestionIndex(currentQuestionIndex + 1);
            return { message: 'Excellent!', buttons: nextQuestion.buttons };
          } else {
            return { message: 'You answered all the questions correctly!' };
          }
        } else {
          // User provided the wrong answer
          return { message: 'Wrong answer. Try again.', buttons: lastChat.buttons };
        }
      }
    }

    // Check if any question patterns match the user's message
    for (const pattern of questionPatterns) {
      if (pattern.pattern.test(lowercaseUserMessage)) {
        return { message: pattern.question };
      }
    }

    return {
      message: 'Es tut mir leid, aber ich verstehe Ihre Frage nicht. Wie kann ich Ihnen helfen?',
    };
  };

  const getNextQuestion = () => {
    // Define the list of questions and their corresponding buttons
    const questions = [
      {
        question: 'Was bedeutet "Alter"?',
        buttons: [
          { label: 'العمر', isCorrect: true },
          { label: 'الوزن', isCorrect: false },
          { label: 'الطول', isCorrect: false },
        ],
      },
      {
        question: 'Was bedeutet "Stadt"?',
        buttons: [
          { label: 'مدينة', isCorrect: true },
          { label: 'قرية', isCorrect: false },
          { label: 'بلدة', isCorrect: false },
        ],
      },
      // Add more questions and buttons as needed
    ];
  
    // Find the next unanswered question
    const lastQuestionIndex = chatHistory.findIndex((chat) => chat.buttons);
    const nextQuestionIndex = lastQuestionIndex + 1;
  
    if (currentQuestionIndex < questions.length) {
      const nextQuestion = questions[currentQuestionIndex];
      const buttons = nextQuestion.buttons.map((button) => ({
        label: button.label,
        onClick: () => handleUserMessageSubmit({ target: { value: button.label } }),
      }));
      return { question: nextQuestion.question, buttons };
    } else {
      return null; // All questions answered
    }
  };
  
  

  useEffect(() => {
    const chatHistoryElement = chatHistoryRef.current;
    chatHistoryElement.scrollTop = chatHistoryElement.scrollHeight;
  }, [chatHistory]);

  useEffect(() => {
    if (!userName) {
      setChatHistory((prevChatHistory) => [
        ...prevChatHistory,
        { message: 'Wie heißen Sie?', sender: 'chatbot', name: 'Chatbot' },
      ]);
    } else {
      const nextQuestion = getNextQuestion();
      if (nextQuestion) {
        setChatHistory((prevChatHistory) => [
          ...prevChatHistory,
          {
            message: `Hallo, ${userName}! ${nextQuestion.question}`,
            sender: 'chatbot',
            name: 'Chatbot',
            buttons: nextQuestion.buttons,
          },
        ]);
      } else {
        setChatHistory((prevChatHistory) => [
          ...prevChatHistory,
          {
            message: `Hallo, ${userName}! You answered all the questions correctly!`,
            sender: 'chatbot',
            name: 'Chatbot',
          },
        ]);
      }
    }
  }, [userName]);
  
  

  return (
    <div className="part-eight-chatbot">
      <div className="chat-history" ref={chatHistoryRef}>
        {chatHistory.map((chat, index) => (
          <div key={index} className={`chat-bubble ${chat.sender}`}>
            <span className="sender-name">{chat.name}</span>
            <p className="message">{chat.message}</p>
            {chat.buttons && (
              <div className="buttons">
                {chat.buttons.map((button, buttonIndex) => (
                  <button
                    key={buttonIndex}
                    className="button"
                    href={button.url}
                    target="_blank"
                    rel="noopener noreferrer"
                  >
                    {button.label}
                  </button>
                ))}
              </div>
            )}
          </div>
        ))}
        {isChatbotTyping && <div className="chat-bubble chatbot typing"></div>}
      </div>
      <form className="user-input" onSubmit={handleUserMessageSubmit}>
        <input
          type="text"
          value={userMessage}
          onChange={handleUserMessageChange}
          placeholder="Type your message..."
        />
        <button type="submit">Send</button>
      </form>
    </div>
  );
};

export default PartEightChatbot;




.part-eight-container {
  display: flex;
  flex-direction: column;
  justify-content: flex-end;
  align-items: center;
  width: 100%;
  height: 100%;
  border: 2px red solid;
  overflow-y: auto;
  position: absolute;
}

.chat-history {
  overflow-y: auto;
  flex-grow: 1;
  padding: 1rem;
}

.chat-message {
  display: inline-block;
  max-width: 80%;
  margin-bottom: 1rem;
  margin-left: 1rem;
  padding: 0.5rem;
  border-radius: 0.5rem;
}
.chat-messages{
  display: flex;
  flex-direction: column;
}

.user {
  align-self: flex-end;
  background-color: lightblue;
  width: 15rem;
  margin-right: 1rem; /* Added margin to push the user messages to the right */
  margin-bottom: 30px; /* Added margin to create separation */
}
.chatbot-container {
  display: flex;
  flex-direction: column;
  justify-content: flex-end;
  align-items: center;
  width: 100%;
  height: 100%;
  border: 2px red solid;
  overflow-y: auto;
  position: absolute;
}


.chatbot {
  align-self: flex-start;
  background-color: lightgray;
  width: 15rem;
  margin-left: 1rem; /* Added margin to push the chatbot messages to the left */
  margin-bottom: 30px; /* Added margin to create separation */
}


.chatbot-name {
  margin-right: 5px;
  color: #005c7d;
  text-decoration: underline;
}

form {
  display: flex;
  justify-content: center;
  align-items: center;
  padding: 1rem;
}

form input[type="text"] {
  flex-grow: 1;
  margin-right: 0.5rem;
}

form button {
  margin-left: 0.5rem;
}

.typing-indicator {
  display: flex;
  width: 45px;
  height: 10px;
}

.typing-indicator span {
  display: flex;
  width: 15px;
  height: 10px;
  margin-right: 4px;
  border-radius: 50%;
  background-color: #005c7d;
  animation: typing 1.5s infinite;
}

.typing-indicator span:nth-child(1) {
  animation-delay: 0s;
}

.typing-indicator span:nth-child(2) {
  animation-delay: 0.5s;
}

.typing-indicator span:nth-child(3) {
  animation-delay: 1s;
}

@keyframes typing {
  0% {
    opacity: 0.5;
  }
  50% {
    opacity: 1;
  }
  100% {
    opacity: 0.5;
  }
}
/*************************************/
.question-buttons-container{
  background-color: antiquewhite;
}
.question-buttons-container .question-buttons {
  width: 50px;
  height: 40px;
  background-color: rgb(138, 122, 153);
  color: rgb(100, 100, 0);
  margin-right: 5px;
}
