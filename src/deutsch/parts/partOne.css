.partTowa1{
    border-radius: 4PX;
    box-shadow: 1px 1px 4px 4px rgb(123, 126, 151);
    background-color:#16264c;
   /** display: none;*/
}
.p1Container{
    display: flex;
    justify-content: center; /* Center content horizontally */
    flex-direction: column;
    margin-left: 2.5rem;
    color: #020302;
    border-radius: 5%;
    height: 28rem;
    width: 45rem;
    background-color: #581845 ;
    box-shadow: rgba(50, 50, 93, 0.25) 0px 50px 100px -20px, rgba(0, 0, 0, 0.3) 0px 30px 60px -30px, rgba(10, 37, 64, 0.35) 0px -2px 6px 0px inset;
}
.partOne-hallo{
    background-color: #058509;
    width: 150px;
    margin: 0 auto; /* Center element horizontally and vertically */
    line-height: 7.5;
    
}
.Deut-hallo{
    
}


/** .word-animation {
    animation-name: drop;
    animation-duration: 0.5s;
    animation-timing-function: ease-in-out;
    animation-fill-mode: both;
    opacity: 0;
  }
  
  @keyframes drop {
    from {
      transform: translateY(-50%);
      opacity: 0;
    }
    to {
      transform: translateY(0);
      opacity: 1;
    }
  }*/

  /***

return (
  <>
    {renderGreeting(wordsWithClassName[count])}

    {count > 0 && <button className='partOneButtons prev-partOneButtons' onClick={() =>
       setCount(count - 1)}>prev</button>}
    {count < words.length - 1 && (
      <button className='partOneButtons' onClick={handleNextClick}>next</button>
    )}

    <div className='partTowa1' id='box' onClick={handleButtonClick}>
      {isShown && <PartTow />}
    </div>
  </>
);



  */