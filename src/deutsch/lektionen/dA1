import React, { useState, useEffect } from 'react';
import './partFour.css';

const PartFour = () => {
  const [boxPosition, setBoxPosition] = useState({ x: 5, y: 3 });
  const containerSize = { width: 350, height: 400 };
  const boxSize = { width: 50, height: 50 };
  const [gameOver, setGameOver] = useState(false);
  const [currentWordIndex, setCurrentWordIndex] = useState(0);
  const [boxesClicked, setBoxesClicked] = useState(0);
  const totalBoxes = 9;

  const fou = [
    // word objects...
  ];

  useEffect(() => {
    if (!gameOver) {
      const intervalId = setInterval(() => {
        const maxX = containerSize.width - boxSize.width;
        const maxY = containerSize.height - boxSize.height;
        const nextX = Math.floor(Math.random() * maxX);
        const nextY = Math.floor(Math.random() * maxY);
        setBoxPosition({ x: nextX, y: nextY });
      }, 16000);
      return () => clearInterval(intervalId);
    }
  }, [gameOver]);

  const currentWord = fou[currentWordIndex];
  const currentMeaning = currentWord?.bedeutung[0];

  const handleBoxClick = (event) => {
    if (!gameOver) {
      const box = event.target;
      const clickedWord = box.getAttribute('data-word');
      if (box.style.display !== 'none') {
        if (clickedWord === currentMeaning) {
          box.style.display = 'none';
          setBoxesClicked((prevBoxesClicked) => prevBoxesClicked + 1);
          setCurrentWordIndex((prevIndex) => prevIndex + 1);
        } else {
          alert('Wrong word!');
        }
      }
      if (boxesClicked + 1 === totalBoxes) {
        setGameOver(true);
      }
    }
  };

  const handleRefreshClick = () => {
    setBoxPosition({ x: 0, y: 0 });
    setGameOver(false);
    setBoxesClicked(0);
    setCurrentWordIndex(0);
  };

  return (
    <div className='part-four-container'>
      <div>
        <p className='bedeutung-container' key={0}>
          {currentMeaning}
        </p>
      </div>

      {!gameOver && (
        <div className='word-space'>
          {/* Box components */}
        </div>
      )}

      {gameOver && (
        <div>
          <p className='game-over'>Spiel ist aus</p>
          <button className='gam-over-button' onClick={handleRefreshClick}>
            nochmal abspielen
          </button>
        </div>
      )}
    </div>
  );
};

export default PartFour;
